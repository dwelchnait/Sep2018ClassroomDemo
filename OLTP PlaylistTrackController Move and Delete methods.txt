PlaylistTracksController methods

public void MoveTrack(string username, string playlistname, int trackid, int tracknumber, string direction)
        {
            using (var context = new ChinookContext())
            {
                //code to go here 
                var exists = (from x in context.Playlists
                              where x.Name.Equals(playlistname)
                                 && x.UserName.Equals(username)
                              select x).FirstOrDefault();
                if (exists == null)
                {
                    throw new Exception("Play list has been removed from the files.");
                }
                else
                {
                    PlaylistTrack moveTrack = (from x in exists.PlaylistTracks
                                               where x.TrackId == trackid
                                               select x).FirstOrDefault();
                    if (moveTrack == null)
                    {
                        throw new Exception("Play list track has been removed from the files.");
                    }
                    else
                    {
                        //create an instance pointer to be used to point
                        //to the other track involved in the move
                        PlaylistTrack otherTrack = null;

                        //direction
                        if (direction.Equals("up"))
                        {
                            //up
                            //recheck that the track is NOT the first track
                            //if so, throw an error; otherwise move the track
                            if (moveTrack.TrackNumber == 1)
                            {
                                throw new Exception("Play list track already at top.");
                            }
                            else
                            {
                                otherTrack = (from x in exists.PlaylistTracks
                                              where x.TrackNumber == moveTrack.TrackNumber - 1
                                              select x).FirstOrDefault();
                                if (otherTrack == null)
                                {
                                    throw new Exception("Switching track is missing");
                                }
                                else
                                {
                                    moveTrack.TrackNumber -= 1;
                                    otherTrack.TrackNumber += 1;
                                }
                            }
                        }
                        else
                        {
                            //down
                            //recheck that the track is NOT the last track
                            //if so, throw an error; otherwise move the track
                            if (moveTrack.TrackNumber == exists.PlaylistTracks.Count)
                            {
                                throw new Exception("Play list track already at bottom.");
                            }
                            else
                            {
                                otherTrack = (from x in exists.PlaylistTracks
                                              where x.TrackNumber == moveTrack.TrackNumber + 1
                                              select x).FirstOrDefault();
                                if (otherTrack == null)
                                {
                                    throw new Exception("Switching track is missing");
                                }
                                else
                                {
                                    moveTrack.TrackNumber += 1;
                                    otherTrack.TrackNumber -= 1;
                                }
                            } 
                        }//eof up/down

                        //saving the changes to the data
                        //we are saving 2 different entities
                        //indicate the property to save for a
                        //  particular entity instance
                        context.Entry(moveTrack).Property(y => y.TrackNumber).IsModified = true;
                        context.Entry(otherTrack).Property(y => y.TrackNumber).IsModified = true;

                        //commit your changes
                        context.SaveChanges();
                    }
                }
            }
        }//eom


        public void DeleteTracks(string username, string playlistname, List<int> trackstodelete)
        {
            using (var context = new ChinookContext())
            {
                //code to go here
                var exists = (from x in context.Playlists
                              where x.Name.Equals(playlistname)
                                 && x.UserName.Equals(username)
                              select x).FirstOrDefault();
                if (exists == null)
                {
                    throw new Exception("Play list has been removed from the files.");
                }
                else
                {
                    //get a list of tracks that will be kept IN ORDER of TRACKNUMBER
                    //you do NOT know if the physical order is the same as the 
                    //   logical TrackNumber order
                    //.Any() allows you to search for an item in a list using a condition, returns true if found
                    //looking an item in ListA is inside ListB
                    //in this example we DO NOT want to find it thus !
                    var trackskept = exists.PlaylistTracks.
                        Where(tr => !trackstodelete.Any(tod => tod == tr.TrackId)).
                        OrderBy(tr => tr.TrackNumber).
                        Select(tr => tr);

                    //delete tracks
                    PlaylistTrack item = null;
                    foreach (var deletetrackid in trackstodelete)
                    {
                        item = exists.PlaylistTracks.
                            Where(tr => tr.TrackId == deletetrackid).
                            FirstOrDefault();
                        if (item != null)
                        {
                            exists.PlaylistTracks.Remove(item);
                        }
                       
                    }

                    //renumber remaining tracks (tracks that were kept)
                    int number = 1;
                    foreach(var tkept in trackskept)
                    {
                        tkept.TrackNumber = number;
                        number++;
                        context.Entry(tkept).Property(y => y.TrackNumber).IsModified = true;
                    }

                    //commit work
                    context.SaveChanges();

                }
            }
        }//eom